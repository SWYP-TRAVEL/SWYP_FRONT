"use strict";(self.webpackChunkmy_app=self.webpackChunkmy_app||[]).push([[952],{"./src/components/Text.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>Text});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js");const TEXT_STYLES={display1:"text-[56px] leading-[72px] tracking-[-0.0316em]",display2:"text-[40px] leading-[52px] tracking-[-0.0282em]",title1:"text-[36px] leading-[48px] tracking-[-0.0272em]",title2:"text-[28px] leading-[38px] tracking-[-0.0236em]",title3:"text-[24px] leading-[32px] tracking-[-0.0232em]",heading1:"text-[22px] leading-[30px] tracking-[-0.0176em]",heading2:"text-[20px] leading-[28px] tracking-[-0.012em]",headline1:"text-[18px] leading-[26px] tracking-[-0.002em]",headline2:"text-[17px] leading-[24px] tracking-[0em]",body1:"text-[16px] leading-[24px] tracking-[0.0057em]",body1Reading:"text-[16px] leading-[28px] tracking-[0.0057em]",body2:"text-[15px] leading-[22px] tracking-[0.0069em]",body2Reading:"text-[15px] leading-[26px] tracking-[0.0069em]",label1:"text-[14px] leading-[20px] tracking-[0.0145em]",label1Reading:"text-[14px] leading-[22px] tracking-[0.0145em]",label2:"text-[12px] leading-[18px] tracking-[0.0156em]",caption1:"text-[12px] leading-[16px] tracking-[0.0137em]",caption2:"text-[10px] leading-[14px] tracking-[0.0137em]"};function Text({as,textStyle="body1",className="",children,...props}){const Component=as||"span";var _TEXT_STYLES_textStyle;const styleClass=null!==(_TEXT_STYLES_textStyle=TEXT_STYLES[textStyle])&&void 0!==_TEXT_STYLES_textStyle?_TEXT_STYLES_textStyle:"";return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Component,{className:`${styleClass} ${className}`,...props,children})}Text.__docgenInfo={description:"",methods:[],displayName:"Text",props:{as:{required:!1,tsType:{name:"T"},description:""},textStyle:{required:!1,tsType:{name:"union",raw:"keyof typeof TEXT_STYLES",elements:[{name:"literal",value:"display1"},{name:"literal",value:"display2"},{name:"literal",value:"title1"},{name:"literal",value:"title2"},{name:"literal",value:"title3"},{name:"literal",value:"heading1"},{name:"literal",value:"heading2"},{name:"literal",value:"headline1"},{name:"literal",value:"headline2"},{name:"literal",value:"body1"},{name:"literal",value:"body1Reading"},{name:"literal",value:"body2"},{name:"literal",value:"body2Reading"},{name:"literal",value:"label1"},{name:"literal",value:"label1Reading"},{name:"literal",value:"label2"},{name:"literal",value:"caption1"},{name:"literal",value:"caption2"}]},description:"",defaultValue:{value:'"body1"',computed:!1}},className:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'""',computed:!1}},children:{required:!0,tsType:{name:"ReactNode"},description:""}}}},"./src/lib/api/axiosInstance.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>api_axiosInstance});var useAuthStore=__webpack_require__("./src/store/useAuthStore.ts"),console=__webpack_require__("./node_modules/console-browserify/index.js");const useLoadingStore=(0,__webpack_require__("./node_modules/zustand/esm/react.mjs").v)((set=>({isLoading:!1,loadingType:"none",setLoading:(isLoading,type="fullscreen")=>set({isLoading,loadingType:isLoading?type:"none"})})));var axios=__webpack_require__("./node_modules/axios/lib/axios.js"),process=__webpack_require__("./node_modules/process/browser.js"),axiosInstance_console=__webpack_require__("./node_modules/console-browserify/index.js");const backendUrl=process.env.NEXT_PUBLIC_API_BASE_URL,axiosInstance_axiosInstance=axios.A.create({baseURL:backendUrl,headers:{"Content-Type":"application/json"},withCredentials:!0});axiosInstance_axiosInstance.interceptors.request.use((config=>{const{user}=useAuthStore.n.getState();var _config_loadingType;(null==user?void 0:user.accessToken)&&(config.headers.Authorization=`Bearer ${user.accessToken}`);const type=null!==(_config_loadingType=config.loadingType)&&void 0!==_config_loadingType?_config_loadingType:"fullscreen";return useLoadingStore.getState().setLoading(!0,type),config}),(error=>(useLoadingStore.getState().setLoading(!1),Promise.reject(error)))),axiosInstance_axiosInstance.interceptors.response.use((response=>(useLoadingStore.getState().setLoading(!1),response)),(async error=>{useLoadingStore.getState().setLoading(!1);const originalRequest=error.config;if(originalRequest.url.includes("/auth/token/reissue"))return axiosInstance_console.warn("🛑 토큰 재발급 요청은 인터셉터에서 무시합니다."),Promise.reject(error);if(!useAuthStore.n.getState().isLoggedIn)return axiosInstance_console.warn("🔒 로그아웃 상태입니다. 요청 중단"),Promise.reject(error);if(401===error.response.status&&!originalRequest._retry){originalRequest._retry=!0,axiosInstance_console.warn("🔄 401 발생, 토큰 재발급 시도 중...");const newAccessToken=await(async()=>{try{const response=await api_axiosInstance.post("/auth/token/reissue");if(200===response.status){const{accessToken,userName,expiresIn,hasSubmittedExperience}=response.data;return useAuthStore.n.getState().refresh({accessToken,expiresIn}),console.log("🔄 토큰 재발급 성공"),response.data}return console.error("❌ 토큰 재발급 실패"),useAuthStore.n.getState().logout(),null}catch(error){return console.error("토큰 재발급 중 오류 발생:",error),useAuthStore.n.getState().logout(),null}})();if(newAccessToken)return axiosInstance_console.log("✅ 토큰 재발급 성공, 요청 재시도"),originalRequest.headers.Authorization=`Bearer ${newAccessToken}`,axiosInstance_axiosInstance(originalRequest);axiosInstance_console.error("❌ 토큰 재발급 실패, 로그아웃 처리"),useAuthStore.n.getState().logout(),window.location.href="/main"}return Promise.reject(error)}));const api_axiosInstance=axiosInstance_axiosInstance},"./src/lib/api/itinerary.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{RR:()=>getRecommendedDestinations,VX:()=>getPublicItineraries,gJ:()=>changeAttraction,o9:()=>getRecommendText});var _axiosInstance__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/lib/api/axiosInstance.ts");const getRecommendedDestinations=async data=>{try{return(await _axiosInstance__WEBPACK_IMPORTED_MODULE_0__.A.get("/itinerary/preview",{params:data})).data}catch(error){var _error_response;throw new Error((null===(_error_response=error.response)||void 0===_error_response?void 0:_error_response.data.message)||"추천 장소를 불러오지 못했습니다.")}},getPublicItineraries=async limit=>{try{return(await _axiosInstance__WEBPACK_IMPORTED_MODULE_0__.A.get(`/itinerary/public?limit=${limit}`)).data}catch(error){var _error_response;throw new Error((null===(_error_response=error.response)||void 0===_error_response?void 0:_error_response.data.message)||"공개된 여행 코스 목록을 불러오지 못했습니다.")}},getRecommendText=async params=>{try{return(await _axiosInstance__WEBPACK_IMPORTED_MODULE_0__.A.get("/itinerary/recommend/text",{params:{feeling:params.feeling,atmosphere:params.atmosphere,activities:params.activities},loadingType:"none"})).data}catch(err){var _err_response;throw new Error((null===(_err_response=err.response)||void 0===_err_response?void 0:_err_response.data.message)||"여행테마 추천 검색어 불러오기에 실패했습니다.")}},changeAttraction=async data=>{try{return(await _axiosInstance__WEBPACK_IMPORTED_MODULE_0__.A.post("/itinerary/change/attraction",data,{loadingType:"none"})).data}catch(error){var _error_response;throw new Error((null===(_error_response=error.response)||void 0===_error_response?void 0:_error_response.data.message)||"관광지 정보를 변경하지 못했습니다.")}}},"./src/store/useAuthStore.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{n:()=>useAuthStore});var zustand__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/zustand/esm/react.mjs"),zustand_middleware__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/zustand/esm/middleware.mjs"),console=__webpack_require__("./node_modules/console-browserify/index.js");const useAuthStore=(0,zustand__WEBPACK_IMPORTED_MODULE_0__.v)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.Zr)(((set,get)=>({isLoggedIn:!1,user:null,hasHydrated:!1,setHasHydrated:value=>set({hasHydrated:value}),login:user=>{set({isLoggedIn:!0,user})},refresh:token=>{const currentUser=get().user;if(currentUser){const updatedUser={...currentUser,accessToken:token.accessToken,expiresIn:token.expiresIn};set({isLoggedIn:!0,user:updatedUser})}else console.warn("User not found. Cannot refresh token.")},logout:()=>{set({isLoggedIn:!1,user:null})}})),{name:"auth-storage",onRehydrateStorage:()=>state=>{null==state||state.setHasHydrated(!0)}}))},"./src/store/useRecommendTravelStore.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{w1:()=>useRecommendTravelDetailStore,tp:()=>useRecommendTravelListStore,e5:()=>useUserInputStore});var axiosInstance=__webpack_require__("./src/lib/api/axiosInstance.ts");var react=__webpack_require__("./node_modules/zustand/esm/react.mjs"),middleware=__webpack_require__("./node_modules/zustand/esm/middleware.mjs"),console=__webpack_require__("./node_modules/console-browserify/index.js");const useUserInputStore=(0,react.v)()((0,middleware.Zr)((set=>({inputs:null,setInputs:inputs=>set({inputs}),clearInputs:()=>set({inputs:null})})),{name:"user-input"})),useRecommendTravelListStore=(0,react.v)()((0,middleware.Zr)((set=>({items:[],setItems:items=>set({items}),clearItems:()=>set({items:[]})})),{name:"recommend-list"})),calculateScheduleTimes=async places=>places?await Promise.all(places.map((async(currentPlace,index)=>{const nextPlace=places[index+1];if(!nextPlace)return currentPlace;const updatedPlace={...currentPlace,travelWalkTime:"정보 없음",travelCarTime:"정보 없음",travelDistance:"정보 없음"};if(currentPlace.latitude&&currentPlace.longitude&&nextPlace.latitude&&nextPlace.longitude)try{const{walkingDuration,drivingDuration,distance}=await(async data=>{try{return(await axiosInstance.A.get("/route/time",{params:{startLatitude:data.startLatitude,startLongitude:data.startLongitude,endLatitude:data.endLatitude,endLongitude:data.endLongitude},loadingType:"none"})).data}catch(error){var _error_response;throw new Error((null===(_error_response=error.response)||void 0===_error_response?void 0:_error_response.data.message)||"소요 시간 정보를 불러오지 못했습니다.")}})({startLatitude:currentPlace.latitude,startLongitude:currentPlace.longitude,endLatitude:nextPlace.latitude,endLongitude:nextPlace.longitude});walkingDuration&&(updatedPlace.travelWalkTime=`${walkingDuration}분`),drivingDuration&&(updatedPlace.travelCarTime=`${drivingDuration}분`),updatedPlace.travelDistance=""+(distance?distance+"m":"거리 정보 추후 업데이트")}catch(error){console.error("경로 계산 실패:",error)}return updatedPlace}))):[],updateDailySchedules=async schedules=>await Promise.all(schedules.map((async schedule=>{const updatedAttractions=await calculateScheduleTimes(schedule.attractions);return{...schedule,attractions:updatedAttractions}}))),useRecommendTravelDetailStore=(0,react.v)()((0,middleware.Zr)(((set,get)=>({itinerary:null,setItinerary:async itinerary=>{if(null==itinerary?void 0:itinerary.dailyScheduleDtos){const schedulesWithUUID=assignUUIDToSchedules(itinerary.dailyScheduleDtos),updatedSchedules=await updateDailySchedules(schedulesWithUUID);set({itinerary:{...itinerary,dailyScheduleDtos:updatedSchedules}})}else set({itinerary})},updateItinerary:async updatedItinerary=>{const itinerary=get().itinerary;if(itinerary){const updatedSchedules=await updateDailySchedules(updatedItinerary);set({itinerary:{...itinerary,dailyScheduleDtos:updatedSchedules}})}},updateAttraction:async(oldAttraction,newAttraction)=>{const itinerary=get().itinerary;if(itinerary){const updatedSchedules=await Promise.all(itinerary.dailyScheduleDtos.map((async schedule=>{if(!schedule.attractions.some((attraction=>attraction.id===oldAttraction.id)))return schedule;const updatedAttractions=await calculateScheduleTimes(schedule.attractions.map((attraction=>attraction.id===oldAttraction.id?{...newAttraction,id:oldAttraction.id,previousData:JSON.parse(JSON.stringify(attraction))}:attraction)));return{...schedule,attractions:updatedAttractions}})));set({itinerary:{...itinerary,dailyScheduleDtos:updatedSchedules}})}},clearItinerary:()=>set({itinerary:null})})),{name:"recommend-detail"})),assignUUIDToAttraction=((0,react.v)()((0,middleware.Zr)((set=>({itinerary:null,setItinerary:async value=>{if(null==value?void 0:value.dailyScheduleDtos){const schedulesWithUUID=assignUUIDToSchedules(value.dailyScheduleDtos),updatedSchedules=await updateDailySchedules(schedulesWithUUID);set({itinerary:{...value,dailyScheduleDtos:updatedSchedules}})}else set({itinerary:value})},clearItinerary:()=>set({itinerary:null})})),{name:"public-travel-detail"})),attraction=>({...attraction,id:attraction.id&&"number"==typeof attraction.id?attraction.id:Date.now()+Math.floor(1e4*Math.random()),previousData:attraction.previousData?assignUUIDToAttraction(attraction.previousData):void 0})),assignUUIDToSchedules=schedules=>schedules.map((schedule=>{return{...schedule,attractions:(attractions=schedule.attractions,attractions.map(assignUUIDToAttraction))};var attractions}))}}]);